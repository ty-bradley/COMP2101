#!/bin/bash

# bc - An arbitrary precision calculator language

bc

# -- is an option that tells MOST commands to stop looking for options.
# if you were working with data that started with a dash this is how you would approach that.

nano -- -x

# bash debug
# set -x to turn on debug. (Shows you the command before it runs.)
# set +x to turn off debug.

# Good format for creating templates rather than having a ton of echo commands.

echo "
My Variables
============

my cmd: $mycmd
myfile: $myfile
myname: $myname

============
"

# You can use the bash command to run the command in bash.

bash /path/to/file

# You can run bash in debug mode once instead of for every command for the shell you can set a -x as an option.
# It starts a new bash process and runs it, meaning local variables are not accessible to this new bash process.

bash -x /path/to/file

# You can use \ to turn the special character after it, like enter

echo hello\
world

# would return: hello world on one line

# * substitutes for file names, careful when working or using this character in your data.

# ? means one character here.

# ls ? would find all files with single characters.
# ls ?? would find all files with two characters.
# ls a?? would find all files that start with a and end with two characters.

# ls [bc] would find all files with a single character that contain either b or c.
# ls a[bc]? would find all files that start with a, have a second character with b or c, and last character can be anything but must contain 3 characters.

# ls *\ * would find all files containing a space before, after or just a space.
# ls *' '* would find all files containing quotes and text before or after.

# Bash can do basic arithmetic on integers.
# put arithmetic statements inside $(( )) - there are additional operators.
# +, -, *, /, %

# $RANDOM algorithm is a built in variable and will output a random variable.
# $RANDOM algorithm is not very good so you shouldn't use it for complex.

# /dev/random hooks into the kernel and prints binary data. Bash cannot convert binary to print.
# dd if=/dev/random bs=16 count =1

